/* eslint-disable no-console */
// Implementation of Nelder-Mead Simplex Linear Optimizer
//	TODO: Robust Unit Test of 2D Function Optimizations
//	TODO: Extend to support functions beyond the 2D Space

function Simplex(vertices) {
    this.vertices = vertices;
    this.centroid = null;
    this.reflect_point = null; // Reflection point, updated on each iteration
    this.reflect_cost = null;
    this.expand_point = null;
    this.expand_cost = null;
    this.contract_point = null;
    this.contract_cost = null;
}

// sort the vertices of Simplex by their objective value as defined by objFunc
Simplex.prototype.sortByCost = function sortByCost(objFunc) {
    this.vertices.sort((a, b) => objFunc(a) - objFunc(b));
};

// find the centroid of the simplex (ignoring the vertex with the worst objective value)
Simplex.prototype.updateCentroid = function updateCentroid(objFunc) {
    let vert;
    let isMaped = false;
    this.sortByCost(objFunc);
    if (!Array.isArray(this.vertices[0])) {
        isMaped = true;
        vert = this.vertices.map( el => [el]);
    } else {
        isMaped = false;
        [...vert] = this.vertices;
    }
    vert.pop()
        const rez = vert[0].map((el,i) => {
            return vert.reduce((acc,el2) => {
                return acc + el2[i];
            },0) / vert.length;
        })
        if (isMaped) {
            [this.centroid] = rez;
        }   else {
            this.centroid = rez;
        }
        
};

Simplex.prototype.updateReflectPoint = function updateReflectPoint(objFunc) {
    const worstPoint = this.vertices[this.vertices.length - 1];


    if (!Array.isArray(this.vertices[0])) {
        this.reflect_point = this.centroid + (this.centroid - worstPoint);
    } else {
        this.reflect_point = this.centroid.map((el,i) => {
            return this.centroid[i] + (this.centroid[i] - worstPoint[i]);
        });
    }
    this.reflect_cost = objFunc(this.reflect_point);
};

Simplex.prototype.updateExpandPoint = function updateExpandPoint(objFunc) {
    const worstPoint = this.vertices[this.vertices.length - 1];
    if (!Array.isArray(this.vertices[0])) {
        this.expand_point = this.centroid + 2 * (this.centroid - worstPoint);
    } else {
        this.expand_point = this.centroid.map((el,i) => {
            return this.centroid[i] + 2 * (this.centroid[i] - worstPoint[i]);
        }); 
    }
    this.expand_cost = objFunc(this.expand_point);
};

Simplex.prototype.updateContractPoint = function updateContractPoint(objFunc) {
    const worstPoint = this.vertices[this.vertices.length - 1];

    if (!Array.isArray(this.vertices[0])) {
        this.contract_point = this.centroid + 0.5 * (this.centroid - worstPoint);
    } else {
        this.contract_point = this.centroid.map((el,i) => {
            return this.centroid[i] + 0.5 * (this.centroid[i] - worstPoint[i]);
        }); 
    }
    this.contract_cost = objFunc(this.contract_point);
};

// assumes sortByCost has been called prior!
Simplex.prototype.getVertexCost = function getVertexCost(objFunc, option) {
    let rez;
    if (option === 'worst') {
        rez = objFunc(this.vertices[this.vertices.length - 1]);
    } else if (option === 'secondWorst') {
        rez = objFunc(this.vertices[this.vertices.length - 2]);
    } else if (option === 'best') {
        rez = objFunc(this.vertices[0]);
    }
    return rez
};

Simplex.prototype.reflect = function reflect() {    
    this.vertices[this.vertices.length - 1] = this.reflect_point; // replace the worst vertex with the reflect vertex
};

Simplex.prototype.expand = function expand() {
    this.vertices[this.vertices.length - 1] = this.expand_point; // replace the worst vertex with the expand vertex
};

Simplex.prototype.contract = function contract() {    
    this.vertices[this.vertices.length - 1] = this.contract_point; // replace the worst vertex with the contract vertex
};

Simplex.prototype.reduce = function reduce() {
    let bestX; 
    let a
    if (!Array.isArray(this.vertices[0])) {
        [bestX] = this.vertices;
        for (a = 1; a < this.vertices.length; a += 1) {
            this.vertices[a] = bestX + 0.5 * (this.vertices[a] - bestX); // 0.1 + 0.5(0.1-0.1)
        }
    } else {
        [bestX] = this.vertices;

        this.vertices = this.vertices.map(el => {
            return el.map((el2,i2) => {
                return bestX[i2] + 0.5 * (el2 - bestX[i2])
            })
        })
    }
};

function NM(objFunc, x0, numIters) {

	// This is our Simplex object that will mutate based on the behavior of the objective function objFunc
    const S = new Simplex([x0, x0 + 1, x0 + 2]);
    let itr; 
    let x;
    const rez = [];
    for (itr = 0; itr < numIters; itr += 1) {
        
        S.updateCentroid(objFunc); // needs to know which objFunc to hand to sortByCost
        S.updateReflectPoint(objFunc);

        [x] = S.vertices;
        document.write(`Iteration: ${itr} x = ${x} cost = ${objFunc(x)} centr =  ${S.centroid}<br/>`);
        rez.push([itr,x,objFunc(x),S.centroid])

        if (S.reflect_cost < S.getVertexCost(objFunc, 'secondWorst') && S.reflect_cost > S.getVertexCost(objFunc, 'best')) {
            S.reflect();
        } else if (S.reflect_cost < S.getVertexCost(objFunc, 'best')) { // new point is better than previous best: expand

            S.updateExpandPoint(objFunc);
           
            if (S.expand_cost < S.reflect_cost) {
                S.expand();
            } else {           
                S.reflect();
            }
        } else { // new point was worse than all current points: contract

            S.updateContractPoint(objFunc);

            if (S.contract_cost < S.getVertexCost(objFunc, 'worst')) {
                S.contract();
            } else {                
                S.reduce();            
            }
        }
    }
    const ref = [[0,100,250000608000369660,100.5], [1,97.5,204163486802836300,98.75], [2,94.25,155665418027805220,95.875], [3,87.625,86889206126047650,90.9375], [4,77.8125,33599839983426924,82.71875], [5,59.65625,4010445587726222,68.734375], [6,30.953125,21067484389878.92,45.3046875], [7,12.796875,18001987452.094666,21.875], [8,12.796875,18001987452.094666,-1.5546875], [9,12.796875,18001987452.094666,-1.5546875], [10,12.796875,18001987452.094666,13.748046875], [11,-1.5546875,777.4397399787973,5.62109375], [12,-1.5546875,777.4397399787973,-2.0302734375], [13,-1.5546875,777.4397399787973,-2.0302734375], [14,-1.5546875,777.4397399787973,0.0609130859375], [15,-1.5546875,777.4397399787973,-0.105194091796875], [16,-0.9960479736328125,48.234955075864214,-1.2753677368164062], [17,-0.9960479736328125,48.234955075864214,-0.4109611511230469], [18,-0.9960479736328125,48.234955075864214,-0.48740291595458984], [19,-0.8181672096252441,28.42449092009081,-0.9071075916290283], [20,-0.8181672096252441,28.42449092009081,-0.6083148717880249], [21,-0.8181672096252441,28.42449092009081,-0.6385428607463837], [22,-0.7585830241441727,26.052909045034045,-0.7883751168847084], [23,-0.6087507680058479,25.34250312041559,-0.6836668960750103], [24,-0.6087507680058479,25.34250312041559,-0.5938547216355801], [25,-0.6836668960750103,24.903237900811483,-0.6462088320404291], [26,-0.6836668960750103,24.903237900811483,-0.6911149192601442], [27,-0.6836668960750103,24.903237900811483,-0.6873909076675773], [28,-0.6649378640577197,24.878369916792174,-0.674302380066365], [29,-0.6649378640577197,24.878369916792174,-0.6630758582614362], [30,-0.6649378640577197,24.878369916792174,-0.6696201220620424], [31,-0.6728922539623454,24.877282602269055,-0.6689150590100326], [32,-0.6662213984818663,24.877050998985972,-0.6695568262221059], [33,-0.671866307304299,24.87646821884792,-0.6690438528930827], [34,-0.6671196523584513,24.87638821444801,-0.6694929798313751], [35,-0.6711287705061295,24.876058526161604,-0.6691242114322904], [36,-0.6677531634962861,24.876049983320158,-0.6694409670012078], [37,-0.6706016243225861,24.875855583322604,-0.6691773939094361], [38,-0.6706016243225861,24.875855583322604,-0.6694016649668377], [39,-0.6702259157021135,24.87575659855426,-0.6704137700123498], [40,-0.6692138106566015,24.875678644575814,-0.6697198631793575], [41,-0.6692138106566015,24.875678644575814,-0.6691198835014833], [42,-0.6692138106566015,24.875678644575814,-0.6694668369179795], [43,-0.6696403136262276,24.87567797362435,-0.6694270621414145], [44,-0.6692806616224429,24.875675315579773,-0.6694604876243353], [45,-0.6695838261082022,24.87567525908538,-0.6694322438653226], [46,-0.6693282089848702,24.875673676960645,-0.6694560175465363], [47,-0.6693282089848702,24.875673676960645,-0.6694359522467266], [48,-0.6693620153159887,24.875672880608246,-0.6693451121504295], [49,-0.6694528554122858,24.875672258999433,-0.6694074353641373], [50,-0.6694528554122858,24.875672258999433,-0.6694613069950655], [51,-0.6694528554122858,24.875672258999433,-0.6694301453882116], [52,-0.6694145645847847,24.875672251193087,-0.6694337099985352], [53,-0.6694468473157342,24.875672231762994,-0.6694307059502594], [54,-0.6694196312192462,24.875672229651336,-0.6694332392674902], [55,-0.669442576608843,24.875672218289907,-0.6694311039140446], [56,-0.669442576608843,24.875672218289907,-0.6694329044110214], [57,-0.6694395410069091,24.87567221168776,-0.6694410588078761], [58,-0.6694313866100544,24.875672206189872,-0.6694354638084817], [59,-0.6694313866100544,24.875672206189872,-0.669430627709571], [60,-0.6694313866100544,24.875672206189872,-0.6694310071598126], [61,-0.6694334252092681,24.87567220589233,-0.6694324059096612], [62,-0.6694334252092681,24.87567220589233,-0.6694336149343889], [63,-0.6694334252092681,24.87567220589233,-0.6694329155594647], [64,-0.6694325658720026,24.87567220588185,-0.6694329955406353], [65,-0.6694332903561223,24.87567220587759,-0.6694329281140625], [66,-0.6694326795664598,24.875672205871865,-0.669432984961291], [67,-0.6694331945059352,24.875672205870064,-0.6694329370361976], [68,-0.6694327603762351,24.875672205866884,-0.6694329774410852], [69,-0.6694331263783979,24.875672205866227,-0.6694329433773165], [70,-0.6694328178130071,24.875672205864404,-0.6694329720957025], [71,-0.6694330779554363,24.87567220586425,-0.6694329478842217], [72,-0.6694328586371336,24.87567220586317,-0.669432968296285], [73,-0.6694328586371336,24.87567220586317,-0.6694329510875288], [74,-0.669432887653575,24.87567220586258,-0.6694328731453543], [75,-0.6694329655957494,24.87567220586209,-0.6694329266246621], [76,-0.6694329655957494,24.87567220586209,-0.6694329728498597], [77,-0.6694329655957494,24.87567220586209,-0.6694329461102058], [78,-0.6694329655957494,24.87567220586209,-0.6694329491680641], [79,-0.6694329604397651,24.875672205862063,-0.6694329630177572], [80,-0.6694329465900719,24.875672205862045,-0.6694329535149185], [81,-0.6694329465900719,24.875672205862045,-0.6694329453010759], [82,-0.6694329465900719,24.875672205862045,-0.6694329500524951], [83,-0.6694329465900719,24.875672205862045,-0.6694329500524951], [84,-0.6694329465900719,24.875672205862045,-0.6694329477273562], [85,-0.6694329465900719,24.875672205862045,-0.6694329483212835], [86,-0.6694329465900719,24.875672205862045,-0.6694329483212835], [87,-0.6694329465900719,24.875672205862045,-0.6694329474556777], [88,-0.6694329465900719,24.875672205862045,-0.6694329470228748], [89,-0.6694329465900719,24.875672205862045,-0.6694329468064734], [90,-0.6694329465900719,24.875672205862045,-0.6694329466982727], [91,-0.6694329465900719,24.875672205862045,-0.6694329466217621], [92,-0.6694329465900719,24.875672205862045,-0.669432946605917], [93,-0.6694329465900719,24.875672205862045,-0.6694329465979945], [94,-0.6694329465900719,24.875672205862045,-0.6694329465940332], [95,-0.6694329465900719,24.875672205862045,-0.6694329465940332], [96,-0.6694329465900719,24.875672205862045,-0.6694329465920525], [97,-0.6694329465900719,24.875672205862045,-0.6694329465910622], [98,-0.6694329465900719,24.875672205862045,-0.6694329465905671], [99,-0.6694329465900719,24.875672205862045,-0.6694329465905671], [100,-0.6694329465900719,24.875672205862045,-0.6694329465902704], [101,-0.6694329465900719,24.875672205862045,-0.6694329465901957], [102,-0.6694329465900719,24.875672205862045,-0.6694329465901957], [103,-0.6694329465900719,24.875672205862045,-0.6694329465901339], [104,-0.6694329465900719,24.875672205862045,-0.6694329465901029], [105,-0.6694329465900719,24.875672205862045,-0.6694329465900875], [106,-0.6694329465900719,24.875672205862045,-0.6694329465900746], [107,-0.6694329465900719,24.875672205862045,-0.6694329465900732], [108,-0.6694329465900719,24.875672205862045,-0.6694329465900739], [109,-0.6694329465900719,24.875672205862045,-0.6694329465900739], [110,-0.6694329465900719,24.875672205862045,-0.6694329465900739], [111,-0.6694329465900719,24.875672205862045,-0.6694329465900724], [112,-0.6694329465900719,24.875672205862045,-0.6694329465900721], [113,-0.6694329465900719,24.875672205862045,-0.669432946590072], [114,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [115,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [116,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [117,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [118,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [119,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [120,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [121,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [122,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [123,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [124,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [125,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [126,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [127,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [128,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [129,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [130,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [131,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [132,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [133,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [134,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [135,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [136,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [137,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [138,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [139,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [140,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [141,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [142,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [143,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [144,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [145,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [146,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [147,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [148,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [149,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [150,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [151,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [152,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [153,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [154,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [155,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [156,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [157,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [158,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [159,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [160,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [161,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [162,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [163,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [164,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [165,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [166,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [167,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [168,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [169,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [170,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [171,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [172,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [173,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [174,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [175,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [176,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [177,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [178,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [179,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [180,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [181,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [182,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [183,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [184,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [185,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [186,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [187,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [188,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [189,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [190,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [191,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [192,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [193,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [194,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [195,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [196,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [197,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [198,-0.6694329465900719,24.875672205862045,-0.6694329465900719], [199,-0.6694329465900719,24.875672205862045,-0.6694329465900719]]
    // const rezStr = rez.map(el => `[${el}]`).join(', ')
    
    // const refStr = ref.map(el => `[${el}]`).join(', ')
    // console.dir(rezStr)
    // console.dir(refStr)
    // console.dir(rez)
    // console.dir(ref)
    
    const err = ref.map((el,i) => (rez[i][1] - el[1])**2).reduce((acc,el2) => {
        return acc + el2
    },0 ) ** (0.5)
    console.dir(err)

}

// function that we are currently trying to minimize: 5(x^4) + 6x + 8
function parabola(x) {
    return 5 * x ** 4 + 6 * x + 8;
}

// objective function that Nelder Mead will seek to minimize by mutating the simplex
function parabolicCost(x) {
    const residual = parabola(x); 
    return residual ** 2;
}



// TODO: Robust Unit Testing
NM(parabolicCost, 100, 200);
document.write('<br>This particular function is minimized when x = -0.669433 according to <a href="http://www.wolframalpha.com/input/?i=5%28x^4%29+%2B+6x+%2B+8">WolframAlpha</a><br/>');

const point = 8;

function testFunc (arr) {
    return ( (12*arr[0]+1) ** 2 +  (4*arr[1]-15) ** 2 );
}



function DNM(objFunc, x0, numIters) {

	// This is our Simplex object that will mutate based on the behavior of the objective function objFunc
    const S = new Simplex([x0, [x0[0],x0[1] + 1], [x0[0] + 1,x0[1]]]);
    const rez = [];
    let action = '';
    let x;
    for (let itr = 0; itr < numIters; itr += 1) {
        S.updateCentroid(objFunc); // needs to know which objFunc to hand to sortByCost
        S.updateReflectPoint(objFunc);
        [x] = S.vertices;
        document.write(`${itr}. x = ${x[0].toFixed(point)} ${x[1].toFixed(point)} cost = ${objFunc(x).toFixed(point)} centr = ${S.centroid}, ${action}<br/>`);
        rez.push([itr,x,objFunc(x),S.centroid])

        if (S.reflect_cost < S.getVertexCost(objFunc, 'secondWorst') && S.reflect_cost > S.getVertexCost(objFunc, 'best')) {
            action = 'reflect';
            S.reflect();
        } else if (S.reflect_cost < S.getVertexCost(objFunc, 'best')) { // new point is better than previous best: expand

            S.updateExpandPoint(objFunc);
           
            if (S.expand_cost < S.reflect_cost) {
                action = 'expand';
                S.expand();
            } else {           
                action = 'reflect';
                S.reflect();
            }
        } else { // new point was worse than all current points: contract

            S.updateContractPoint(objFunc);

            if (S.contract_cost < S.getVertexCost(objFunc, 'worst')) {
                action = 'contract';
                S.contract();
            } else {                
                action = 'reduce';         
                S.reduce();   
            }
        }
    }
}

DNM(testFunc, [-354,1153],100)
